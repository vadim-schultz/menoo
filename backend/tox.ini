[tox]
min_version = 4.0
env_list =
    format
    lint
    type
    test
    coverage
    security
skip_missing_interpreters = true

[testenv]
description = Base environment with common dependencies
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-benchmark>=4.0.0
    pytest-xdist>=3.3.0
    pytest-timeout>=2.1.0
    httpx>=0.24.0
    respx>=0.20.0
    hypothesis>=6.82.0
    faker>=19.0.0

[testenv:format]
description = Format code with ruff
skip_install = true
deps =
    ruff>=0.1.0
commands =
    ruff format .
    ruff check --fix --select I .

[testenv:format-check]
description = Check code formatting
skip_install = true
deps =
    ruff>=0.1.0
commands =
    ruff format --check .
    ruff check --select I .

[testenv:lint]
description = Lint code with ruff
skip_install = true
deps =
    ruff>=0.1.0
commands =
    ruff check .

[testenv:lint-fix]
description = Lint and fix code with ruff
skip_install = true
deps =
    ruff>=0.1.0
commands =
    ruff check --fix .

[testenv:type]
description = Type check with mypy
deps =
    mypy>=1.5.0
    types-python-dateutil
    sqlalchemy[mypy]>=2.0.0
commands =
    mypy app tests

[testenv:test]
description = Run unit and integration tests
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests} \
        -v \
        --tb=short \
        --strict-markers \
        -m "not slow"

[testenv:test-all]
description = Run all tests including slow ones
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests} \
        -v \
        --tb=short \
        --strict-markers

[testenv:test-unit]
description = Run unit tests only
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests/unit} \
        -v \
        --tb=short \
        --strict-markers \
        -m unit

[testenv:test-integration]
description = Run integration tests only
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests/integration} \
        -v \
        --tb=short \
        --strict-markers \
        -m integration

[testenv:test-parallel]
description = Run tests in parallel
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests} \
        -v \
        -n auto \
        --tb=short \
        --strict-markers \
        -m "not slow"

[testenv:coverage]
description = Run tests with coverage report
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests} \
        --cov=app \
        --cov-report=term-missing:skip-covered \
        --cov-report=html \
        --cov-report=xml \
        --cov-fail-under=80 \
        --strict-markers

[testenv:coverage-report]
description = Generate coverage reports only
skip_install = true
deps =
    coverage[toml]>=7.0.0
commands =
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:security]
description = Run security checks with bandit
skip_install = true
deps =
    bandit[toml]>=1.7.5
commands =
    bandit -r app -c pyproject.toml

[testenv:deps-check]
description = Check for dependency vulnerabilities
skip_install = true
deps =
    pip-audit>=2.6.0
commands =
    pip-audit

[testenv:clean]
description = Clean up build artifacts and cache
skip_install = true
deps =
allowlist_externals =
    rm
    find
commands =
    rm -rf build dist *.egg-info .coverage htmlcov .pytest_cache .mypy_cache .ruff_cache .tox
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[testenv:benchmark]
description = Run performance benchmarks
deps =
    {[testenv]deps}
commands =
    pytest tests/benchmarks \
        -v \
        --benchmark-only \
        --benchmark-autosave \
        --benchmark-compare

[testenv:dev]
description = Development environment with all tools
deps =
    {[testenv]deps}
    ruff>=0.1.0
    mypy>=1.5.0
    ipython>=8.14.0
    ipdb>=0.13.0
commands =
    python -c "print('Development environment ready!')"
